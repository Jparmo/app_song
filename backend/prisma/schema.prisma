// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String @db.VarChar(120)
  email String @db.VarChar(120)
  password String
  library Library?
  playlists Playlist[]
}

model Library{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  songs LibraryWithSongs[]
}

model Song{
  id Int @id @default(autoincrement())
  title String @db.VarChar(120)
  year Int
  genred String
  author Author @relation(fields: [authorId], references: [id])
  authorId Int
  albums AlbumWithSongs[]
  playlists PlaylistWithSongs[]
  library LibraryWithSongs[]
}

model Album{
  id Int @id @default(autoincrement())
  name String
  year Int
  genred String
  songs AlbumWithSongs[]
}

model Playlist{
  id Int @id @default(autoincrement())
  name String
  songs PlaylistWithSongs[]
  owner User @relation(fields: [ownerId], references: [id]) 
  ownerId Int
}

model Author{
  id Int @id @default(autoincrement())
  name String
  songs Song[]
}
//tabla intermedia en relacion de muchos a muchos
model AlbumWithSongs{
  album Album @relation(fields: [albumId], references: [id])
  albumId Int
  song Song @relation(fields: [songId], references: [id])
  songId Int
  @@id([albumId,songId]) //relacion entre ambas tablas
}


model PlaylistWithSongs{
  playlist Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int
  song Song @relation(fields: [songId], references: [id])
  songId Int
  @@id([playlistId,songId]) //relacion entre ambas tablas
}

model LibraryWithSongs{
  library Library @relation(fields: [libraryId], references: [id])
  libraryId Int
  song Song @relation(fields: [songId], references: [id])
  songId Int
  @@id([libraryId,songId]) //relacion entre ambas tablas
}
